@page "/products/{id:int}"
@inject IProductService ProductService

<PageTitle>@pageTitle</PageTitle>

@if (product == null)
{
    <span>@message</span>
}
else
{
    <MudCard Class="tw-flex tw-flex-col tw-items-center tw-justify-center md:tw-flex-row">
        <MudImage Class="tw-max-w-[200px] !tw-object-contain tw-ease-in-out hover:tw-scale-105"
                  Src="@product.ImageUrl" Alt="@product.Title" />
        <MudCardContent Class="tw-self-start tw-space-y-5">
            <a href="#">
                <MudText Typo="Typo.h5">@product.Title</MudText>
            </a>
            <MudText Typo="Typo.body2">@product.Description</MudText>
            <MudText Class="tw-text-xl tw-text-green-500" Typo="Typo.body1">$@product.Price</MudText>
        </MudCardContent>
    </MudCard>
}

@code {
    private string pageTitle = string.Empty;
    private Product? product = null;
    private string message = string.Empty;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        pageTitle = "Loading product details ...";
        message = "Loading product details ...";
        var result = await ProductService.GetProductAsync(Id);

        if (result == null)
        {
            pageTitle = "Product not found";
            message = "Could not find the product.";
        }
        else if (!result.Success || result.Data == null)
        {
            pageTitle = "Product not found";
            message = result.Message;
        }
        else
        {
            pageTitle = result.Data.Title;
            product = result.Data;
        }
    }
}
